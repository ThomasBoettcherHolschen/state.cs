/* State v5 finite state machine library
 * Copyright (c) 2014 Steelbreeze Limited
 * Licensed under MIT and GPL v3 licences
 */
using System;
using System.Collections.Generic;

namespace Steelbreeze.Behavior.StateMachines {
	/// <summary>
	/// A simple sample of an object to extend as a base for a state machine context object.
	/// </summary>
	/// <typeparam name="TContext">The type of the derived context class.</typeparam>
	/// <remarks>
	/// By passing the type of the derived class into this base, it allows the callbacks generated by the state machine to pass the fully typed derived class.
	/// Note that properties and methods have been explicitly implemented to hide the members from use other than via the IContext interface.
	/// Should you need persistence, or other such behaviour relating to the context class, implement another class implementing IContext.
	/// </remarks>
	public abstract class DictionaryContext<TContext> : IContext<TContext> where TContext : IContext<TContext> {
		// use a dictionary to store the last known state of a Region
		private readonly Dictionary<Region<TContext>, Vertex<TContext>> current = new Dictionary<Region<TContext>, Vertex<TContext>>();

		// true if a state machine has reached a Terminate PseudoState
		Boolean IContext<TContext>.IsTerminated { get; set; }

		// sets and gets the current state of a specified Region
		Vertex<TContext> IContext<TContext>.this[ Region<TContext> region ] {
			set {
				current[ region ] = value;
			}

			get {
				var value = default( Vertex<TContext> );

				current.TryGetValue( region, out value );

				return value;
			}
		}
	}
}
